#!/bin/bash

# takes the path to the repo and returns the last two directories
get_repo_name(){
  base=$(basename $1)
  dir=$(basename $(dirname $1))
  name="${dir}/${base}"
  echo $name
  return
}

# removes the first component of a branch name which for a remote ref is the name of the remote
get_branch_name_from_remote_path() {
  path=$1
  name=$(basename $path)
  path=$(dirname $path)
  while [ "$(dirname $path)" != '.' ]; do
    base=$(basename $path)
    name="${base}/$name"
    path=$(dirname $path)
  done
  echo $name
  return
}


change_to_repo() {
  path=$1
  remote=$2
  url=$3
  parent_dir=$(dirname $path)
  repo=$(basename $path)
  if [ -d $path/.git ]; then
    cd $path
  else
    if [ -d $parent_dir ]; then
      cd $parent_dir
      if [ -d $repo ]; then
        rm -r $repo
      fi
    else
      mkdir -p $parent_dir
    fi
    cd $parent_dir
    echo "Clone to repository first with url $url"
    git clone --origin $remote $url $repo
    cd $path
  fi
}

containsElement() {
  local e
  for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
  return 1
}

start=$(pwd)

action=$1
shift
force=$1
shift
ssh_login=$1
shift
path=$1
shift
url=$1

IFS_OLD=$IFS
IFS='|'
read -a info <<< "$url"
if [ ${#info[@]} -gt 1 ]; then
	remote="${info[0]}"
	url="${info[1]}"
else
	# take standard remote name
	remote="origin"
fi
IFS=$IFS_OLD

#prefix url with ssh-login
url="ssh://${ssh_login}/${url}"
reponame=$(get_repo_name $path)
echo $reponame
path="${path/#\~/$HOME}"
change_to_repo $path $remote $url
echo "Fetch changes from the server"
git fetch $remote
if [ "$action" == "push" ]; then
	# first push branches with no remote tracking the branch
	while read branch upstream; do
		#upstream is the remote tracking branch
		if [ -z "$upstream" ]; then
			echo "New local branch $branch"
			#git branch --set-upstream-to="${remote}/${branch}" $branch
			git checkout "$branch" >> /dev/null
			git push -u $remote $branch
		fi
	done < <(git for-each-ref --format='%(refname:short) %(push:short)' refs/heads/)
	#does not work: < <(git branch -vv | grep -E -v '\[.*\]')
	if [ $force -eq 1 ]; then
		# forced push
		git push -f --all --repo=$remote
	else
		git push --all --repo=$remote
	fi
  git push --tags
	echo -e "\n"
fi
if [ "$action" == "pull" ]; then
	# remove local tracking branches, where remotes do not exist
	git fetch $remote --prune
	# remove first local branches whose remote tracking branches were deleted
	for branch in `git branch -vv | grep ': gone]' | awk '{print $1}'`
	do
		git branch -D $branch
  done

	# 1) gather all existing local branches
	localb=()
	while read branch; do
		# add local branches to the registry
		localb+=("$branch")
	done < <(git for-each-ref --format='%(refname:short)' refs/heads/)


	# 2) pull in all the remote branches
	while read branch; do
		branchBase=$(get_branch_name_from_remote_path $branch)
		if [[ "$branchBase" != "HEAD" ]]; then
			echo $branchBase
				# check if the local branch exits
			if containsElement "$branchBase" "${localb[@]}"; then
				git checkout $branchBase >> /dev/null
				if [ $force -eq 1 ]; then
					# will reset the working branch to the remote
					# something like a 'forced pull'
					git reset --hard "${remote}/$branchBase" >> /dev/null
				else
					git pull $remote $branchBase
				fi
				if [ $? -ne 0 ]; then
					# remote ref for the local branch does not exist
					# unexpected ERROR since the we are iterating over existing remote refs
						echo "ERROR: Local branch "$branchBase" does not have a remote ref"
				fi
			else
				echo "Set up local tracking branch"
				# remote branch has not a local ref, create it here
				git checkout -b $branchBase $branch
			fi
		fi
	done < <(git for-each-ref --format='%(refname:short)' refs/remotes/)

fi
git checkout master
echo -e "\n"
cd $start
