#!/bin/bash

# takes the path to the repo and returns the last two directories
get_repo_name(){
	base=$(basename $1)
	dir=$(basename $(dirname $1))
	name="${dir}/${base}"
	echo $name
	return
}

change_to_repo() {
	path=$1
	remote=$2
	url=$3
	parent_dir=$(dirname $path)
	repo=$(basename $path)
	if [ -d $path/.git ]; then
		cd $path
	else
		if [ -d $parent_dir ]; then
			cd $parent_dir
			if [ -d $repo ]; then
				rm -r $repo
			fi 
		else 
			mkdir -p $parent_dir
		fi
		cd $parent_dir
		echo "Clone to repository first with url $url"
		git clone --origin $remote $url $repo
		cd $path
	fi	
}
	
start=$(pwd)

action=$1
force=$2
path=$3
url=$4
IFS_OLD=$IFS
IFS='|'
read -a info <<< "$url"
if [ ${#info[@]} -gt 1 ]; then
	remote="${info[0]}"
	url="${info[1]}"
else
	# take standard remote name
	remote="origin"
fi
IFS=$IFS_OLD
reponame=$(get_repo_name $path)
echo $reponame
path="${path/#\~/$HOME}"
change_to_repo $path $remote $url
echo "Fetch changes from the server"
git fetch $remote
if [ "$action" == "push" ]; then
	# first push branches with no remote tracking the branch
	while read branch upstream; do
		#upstream is the remote tracking branch
		if [ -z "$upstream" ]; then
			echo "New local branch $branch"
			#git branch --set-upstream-to="${remote}/${branch}" $branch
			git checkout "$branch" >> /dev/null
			git push -u $remote $branch
		fi
	done < <(git for-each-ref --format='%(refname:short) %(push:short)' refs/heads/)
	#does not work: < <(git branch -vv | grep -E -v '\[.*\]')
	if [ $force -eq 1 ]; then
		# forced push
		git push -f --all --repo=$remote
	else
		git push --all --repo=$remote
	fi
	echo -e "\n"
	
fi
if [ "$action" == "pull" ]; then
	while read branch; do
		# only local branches are considered
		echo $branch
		git checkout $branch >> /dev/null
		if [ $force -eq 1 ]; then
			# will reset the working branch to the remote
			# something like a 'forced pull'
			git reset --hard "${remote}/${branch}" >> /dev/null
		else
			git pull $remote $branch
		fi
	done < <(git for-each-ref --format='%(refname:short)' refs/heads/) 
fi
echo -e "\n"
cd $start


